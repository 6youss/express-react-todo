{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","text","a","fetch","method","headers","body","JSON","stringify","res","json","id","fields","App","React","useState","setText","todos","setTodos","handleTodoChange","done","editTodo","then","newTodo","updatedTodos","map","todo","console","log","catch","err","useEffect","getTodos","className","onSubmit","event","addTodo","preventDefault","onChange","target","value","type","placeholder","index","key","checked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAAMA,EAAW,4B,4CAEV,WAAuBC,GAAvB,eAAAC,EAAA,+EAEeC,MAAMH,EAAW,QAAS,CAC1CI,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEP,WAPtB,cAEGQ,EAFH,gBASUA,EAAIC,OATd,6I,kEAeA,4BAAAR,EAAA,+EAEeC,MAAMH,EAAW,QAAS,CAC1CI,OAAQ,QAHP,cAEGK,EAFH,gBAKUA,EAAIC,OALd,6I,kEAWA,WAAwBC,EAAIC,GAA5B,eAAAV,EAAA,+EAEeC,MAAMH,EAAW,SAAWW,EAAI,CAChDP,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUI,KAPpB,cAEGH,EAFH,gBASUA,EAAIC,OATd,6I,sBC+DQG,MAvFf,WAAgB,IAAD,EACWC,IAAMC,WADjB,mBACNd,EADM,KACAe,EADA,OAEaF,IAAMC,SAAS,IAF5B,mBAENE,EAFM,KAECC,EAFD,KAqBb,SAASC,EAAiBR,EAAIS,GAC5B,OAAO,YDEJ,SAAP,qCCDMC,CAASV,EAAI,CAAES,MAAOA,IACnBE,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACDC,EAAeP,EAAMQ,KAAI,SAAAC,GAAI,OAAKA,EAAKf,KAAOY,EAAQZ,GAAKe,EAAOH,KACxEL,EAASM,GACTG,QAAQC,IAAIL,MAEbM,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,OAehC,OAXAhB,IAAMiB,WAAU,YDpBX,WAAP,gCCqBIC,GACGV,MAAK,YAAqB,IAAD,IAAjBL,aAAiB,MAAT,GAAS,EACxBU,QAAQC,IAAIX,GACZC,EAASD,MAEVY,OAAM,SAAAC,GACLH,QAAQC,IAAIE,QAEf,IAGD,oCACE,yBAAKG,UAAU,iDACb,0BAAMA,UAAU,4CAA4CC,SA3ClE,SAAsBC,IDNjB,SAAP,mCCOIC,CAAQnC,GACLqB,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPI,QAAQC,IAAIL,GACZL,EAAS,GAAD,mBAAKD,GAAL,CAAYM,QAErBM,OAAM,SAAAC,GACLH,QAAQC,IAAIE,MAGhBK,EAAME,mBAkCA,yBAAKJ,UAAU,QACb,2BAAOA,UAAU,8CAAjB,QACA,8BACEK,SAlCZ,SAAsBH,GACpBnB,EAAQmB,EAAMI,OAAOC,QAkCXP,UAAU,6HACVQ,KAAK,OACLC,YAAY,UAIhB,yBAAKT,UAAU,qCACb,4BACEA,UAAU,+GACVQ,KAAK,UAFP,aASJ,yBAAKR,UAAU,6CACb,2BAAOA,UAAU,8CAAjB,SACChB,EAAMQ,KAAI,WAAqBkB,GAArB,IAAGhC,EAAH,EAAGA,GAAIV,EAAP,EAAOA,KAAMmB,EAAb,EAAaA,KAAb,OACT,yBAAKwB,IAAK,QAAUD,EAAOV,UAAU,mEACnC,2BACEA,UAAU,qBACVQ,KAAK,WACLH,SAAUnB,EAAiBR,EAAIS,GAC/ByB,QAASzB,IAEX,0BAAMa,UAAW,yBAA2Bb,EAAO,gBAAkB,KAAMnB,WCtErE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,iB","file":"static/js/main.f0ab5e5b.chunk.js","sourcesContent":["const BASE_URL = \"http://localhost:8000/api\";\n\nexport async function addTodo(text) {\n  try {\n    const res = await fetch(BASE_URL + \"/todo\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ text })\n    });\n    return await res.json();\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getTodos() {\n  try {\n    const res = await fetch(BASE_URL + \"/todo\", {\n      method: \"get\"\n    });\n    return await res.json();\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function editTodo(id, fields) {\n  try {\n    const res = await fetch(BASE_URL + \"/todo/\" + id, {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(fields)\n    });\n    return await res.json();\n  } catch (error) {\n    throw error;\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { addTodo, getTodos, editTodo } from \"./api\";\n\nfunction App() {\n  const [text, setText] = React.useState();\n  const [todos, setTodos] = React.useState([]);\n\n  function handleSubmit(event) {\n    addTodo(text)\n      .then(({ newTodo }) => {\n        console.log(newTodo);\n        setTodos([...todos, newTodo]);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n    event.preventDefault();\n  }\n\n  function handleChange(event) {\n    setText(event.target.value);\n  }\n\n  function handleTodoChange(id, done) {\n    return () => {\n      editTodo(id, { done: !done })\n        .then(({ newTodo }) => {\n          const updatedTodos = todos.map(todo => (todo.id !== newTodo.id ? todo : newTodo));\n          setTodos(updatedTodos);\n          console.log(newTodo);\n        })\n        .catch(err => console.log(err));\n    };\n  }\n\n  React.useEffect(() => {\n    getTodos()\n      .then(({ todos = [] }) => {\n        console.log(todos);\n        setTodos(todos);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"flex flex-col bg-gray-200 justify-center p-20\">\n        <form className=\"bg-white shadow-md rounded px-8 py-8 mb-4\" onSubmit={handleSubmit}>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">Todo</label>\n            <textarea\n              onChange={handleChange}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              type=\"text\"\n              placeholder=\"Todo\"\n            ></textarea>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <button\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n              type=\"submit\"\n            >\n              Ajouter\n            </button>\n          </div>\n        </form>\n\n        <div className=\"bg-white shadow-md rounded px-8 py-8 mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">Todos</label>\n          {todos.map(({ id, text, done }, index) => (\n            <div key={\"todo-\" + index} className=\"relative flex p-6 items-center flash-on-enter hover:bg-blue-100\">\n              <input\n                className=\"mr-2 leading-tight\"\n                type=\"checkbox\"\n                onChange={handleTodoChange(id, done)}\n                checked={done}\n              />\n              <span className={\"text-gray-700 text-sm\" + (done ? \" line-through\" : \"\")}>{text}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}