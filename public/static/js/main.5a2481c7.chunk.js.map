{"version":3,"sources":["api.js","Auth/Login.js","Auth/Signup.js","Auth/index.js","Router.js","serviceWorker.js","index.js"],"names":["BASE_URL","getTodos","a","fetch","method","credentials","res","json","username","password","headers","body","JSON","stringify","ok","Error","statusText","Login","React","useState","setUsername","setPassword","className","value","onChange","e","target","type","onClick","login","then","console","log","todos","catch","err","Signup","signup","Auth","Router","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a2481c7.chunk.js","sourcesContent":["const BASE_URL = \"http://localhost:8000/api\";\n\nexport async function addTodo(text) {\n  try {\n    const res = await fetch(BASE_URL + \"/todo\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ text })\n    });\n    return await res.json();\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getTodos() {\n  try {\n    const res = await fetch(BASE_URL + \"/todo\", {\n      method: \"get\",\n      credentials: \"include\"\n    });\n    return await res.json();\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function editTodo(id, fields) {\n  try {\n    const res = await fetch(BASE_URL + \"/todo/\" + id, {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(fields)\n    });\n    return await res.json();\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function signup(username, password) {\n  try {\n    const res = await fetch(BASE_URL + \"/signup\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ username, password })\n    });\n    if (res.ok) {\n      return await res.json();\n    } else {\n      throw new Error(res.statusText);\n    }\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function login(username, password) {\n  try {\n    const res = await fetch(BASE_URL + \"/login\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ username, password })\n    });\n    if (res.ok) {\n      return await res.json();\n    } else {\n      throw new Error(res.statusText);\n    }\n  } catch (error) {\n    throw error;\n  }\n}\n","import React from \"react\";\nimport { login, getTodos } from \"../api\";\n\nexport default function Login() {\n  const [username, setUsername] = React.useState(\"admin\");\n  const [password, setPassword] = React.useState(\"admin\");\n\n  function handleSubmit() {\n    login(username, password)\n      .then(async res => {\n        console.log(res);\n\n        const todos = await getTodos();\n        console.log(todos);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  return (\n    <div className=\"max-w-xs\">\n      <form className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">Username</label>\n          <input\n            value={username}\n            onChange={e => setUsername(e.target.value)}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            type=\"text\"\n          />\n        </div>\n        <div className=\"mb-6\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">Password</label>\n          <input\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n            className=\"shadow appearance-none rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\"\n            type=\"password\"\n          />\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <button\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            type=\"button\"\n            onClick={handleSubmit}\n          >\n            Sign In\n          </button>\n        </div>\n      </form>\n      <p className=\"text-center text-gray-500 text-xs\">&copy;2019 ZSoft Consulting. All rights reserved.</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { signup } from \"../api\";\n\nexport default function Signup() {\n  const [username, setUsername] = React.useState(\"admin\");\n  const [password, setPassword] = React.useState(\"admin\");\n\n  function handleSubmit() {\n    signup(username, password)\n      .then(async res => {\n        console.log(res);\n      })\n      .catch(err => {\n        console.log(\"err\" + err);\n      });\n  }\n\n  return (\n    <div className=\"max-w-xs\">\n      <form className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">Username</label>\n          <input\n            value={username}\n            onChange={e => setUsername(e.target.value)}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            type=\"text\"\n          />\n        </div>\n        <div className=\"mb-6\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">Password</label>\n          <input\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n            className=\"shadow appearance-none rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\"\n            type=\"password\"\n          />\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <button\n            className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            type=\"button\"\n            onClick={handleSubmit}\n          >\n            Sign Up\n          </button>\n        </div>\n      </form>\n      <p className=\"text-center text-gray-500 text-xs\">&copy;2019 ZSoft Consulting. All rights reserved.</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Login from \"./Login\";\nimport Signup from \"./Signup\";\n\nconst Auth = () => {\n  return (\n    <div className=\"flex justify-around items-center bg-gray-300 h-screen\">\n      <Signup />\n      <Login />\n    </div>\n  );\n};\n\nexport default Auth;\n","import React from \"react\";\n// import App from \"./App\";\nimport Auth from \"./Auth\";\n\nfunction Router() {\n  return (\n    <div>\n      <Auth />\n      {/* <App /> */}\n    </div>\n  );\n}\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Router from \"./Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}